generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String          @id @unique @default(uuid())
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  intraId                Int             @unique
  username               String          @unique @db.VarChar(12)
  avatar                 String
  email                  String          @unique
  isTwoFactorAuthEnabled Boolean         @default(false)
  connectStatus          Boolean         @default(false)
  status                 UserStatus      @default(OFFLINE)
  twoFactorAuthSecret    Bytes?
  ChatMessage            ChatMessage[]
  chatRooms              ChatRoomUser[]
  receivedMessages       DirectMessage[] @relation("receivedMessages")
  sentMessages           DirectMessage[] @relation("sentMessages")
  friends                Friend[]
}

model DirectMessage {
  id         String   @id @unique @default(uuid())
  senderId   String?
  receiverId String?
  content    String
  createdAt  DateTime @default(now())
  receiver   User?    @relation("receivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User?    @relation("sentMessages", fields: [senderId], references: [id], onDelete: Cascade)
}

model ChatRoom {
  id       String         @id @unique @default(uuid())
  name     String
  messages ChatMessage[]
  users    ChatRoomUser[]
}

model ChatRoomUser {
  id     String   @id @default(uuid())
  userId String
  roomId String
  room   ChatRoom @relation(fields: [roomId], references: [id])
  user   User     @relation(fields: [userId], references: [id])
}

model ChatMessage {
  id        String   @id @unique @default(uuid())
  content   String
  createdAt DateTime @default(now())
  roomId    String
  senderId  String
  chatRoom  ChatRoom @relation(fields: [roomId], references: [id])
  sender    User     @relation(fields: [senderId], references: [id])
}

model UserGameSession {
  id        String          @id @default(uuid())
  createdAt DateTime        @default(now())
  players   UserIntraData[]
}

model UserIntraData {
  id                String           @id @unique @default(uuid())
  intraId           Int
  username          String
  avatar            String
  email             String
  userGameSessionId String?
  UserGameSession   UserGameSession? @relation(fields: [userGameSessionId], references: [id], onDelete: Cascade)
}

model Friend {
  userId   String?
  intraId  Int
  avatar   String
  email    String
  username String
  id       String  @id @unique @default(uuid())
  User     User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GameDataSetPlayer {
  id            String       @id @unique @default(uuid())
  intraId       Int
  score         Int
  isWinner      Boolean
  avatar        String
  username      String
  gameDataSetId String?
  GameDataSet   GameDataSet? @relation(fields: [gameDataSetId], references: [id], onDelete: Cascade)
}

model GameDataSet {
  id          String              @id @unique @default(uuid())
  startedAt   DateTime
  elapsedTime Int
  sessionId   String
  players     GameDataSetPlayer[]
}

enum UserStatus {
  ONLINE
  OFFLINE
  PLAYING
}
