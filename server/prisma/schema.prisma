generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ChannelType {
  PUBLIC
  PRIVATE
  PROTECTED
}

model User {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  twoFactorAuthSecret    Bytes?
  isTwoFactorAuthEnabled Boolean @default(false)

  intraId  Int    @unique
  username String @unique @db.VarChar(12)
  avatar   String
  email    String @unique

  friends Friend[]

  status UserStatus @default(OFFLINE)

  sentMessages     DirectMessage[] @relation("sentMessages")
  receivedMessages DirectMessage[] @relation("receivedMessages")
  // Relaci贸n con las salas de chat
  chatRooms        ChatRoomUser[]
  chatRoomOwner    ChatRoom[]      @relation("ownerRooms")

  connectStatus Boolean       @default(false)
  ChatMessage   ChatMessage[]

  // DM blocked users
  blockList String[] @db.Uuid
}

model DirectMessage {
  id         String   @id @unique @default(uuid())
  senderId   String?
  receiverId String?
  content    String
  createdAt  DateTime @default(now())
  receiver   User?    @relation("receivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User?    @relation("sentMessages", fields: [senderId], references: [id], onDelete: Cascade)
}

model ChatRoom {
  id        String   @id @unique @default(uuid())
  name      String
  createdAt DateTime @default(now())

  // Owner Chat
  ownerId   String
  ownerUser User   @relation("ownerRooms", fields: [ownerId], references: [id], onDelete: Cascade)

  // Relaci贸n con los mensajes en la sala
  messages ChatMessage[]
  users    ChatRoomUser[]

  // Privacy
  type     ChannelType @default(PUBLIC)
  password String?

  // Relaci贸n con usuarios silenciados en esta sala
  adminUsers  ChatRoomUser[] @relation("adminRooms")
  mutedUsers  ChatRoomUser[] @relation("mutedRooms")
  bannedUsers ChatRoomUser[] @relation("bannedRooms")
}

model ChatRoomUser {
  id     String @id @default(uuid())
  userId String
  roomId String

  user User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  room ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)

  // Agregar cualquier otro dato relacionado con la sala de chat y los usuarios
  // Relaci贸n con salas de chat silenciadas por este usuario
  mutedRooms  ChatRoom[] @relation("mutedRooms")
  adminRooms  ChatRoom[] @relation("adminRooms")
  bannedRooms ChatRoom[] @relation("bannedRooms")
}

model ChatMessage {
  id        String   @id @unique @default(uuid())
  content   String
  createdAt DateTime @default(now())
  roomId    String
  senderId  String
  chatRoom  ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model UserGameSession {
  id        String          @id @default(uuid())
  createdAt DateTime        @default(now())
  players   UserIntraData[]
}

model UserIntraData {
  id                String           @id @unique @default(uuid())
  intraId           Int
  username          String
  avatar            String
  email             String
  userGameSessionId String?
  UserGameSession   UserGameSession? @relation(fields: [userGameSessionId], references: [id], onDelete: Cascade)
}

model Friend {
  userId   String?
  intraId  Int
  avatar   String
  email    String
  username String
  id       String  @id @unique @default(uuid())
  User     User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GameDataSetPlayer {
  id            String       @id @unique @default(uuid())
  intraId       Int
  score         Int
  isWinner      Boolean
  avatar        String
  username      String
  gameDataSetId String?
  GameDataSet   GameDataSet? @relation(fields: [gameDataSetId], references: [id], onDelete: Cascade)
}

model GameDataSet {
  id          String              @id @unique @default(uuid())
  startedAt   DateTime
  elapsedTime Int
  sessionId   String
  players     GameDataSetPlayer[]
}

enum UserStatus {
  ONLINE
  OFFLINE
  PLAYING
}
